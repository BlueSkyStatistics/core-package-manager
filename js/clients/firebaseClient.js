const axios = require('axios')
var { initializeApp } = require("firebase/app");
var { getStorage, ref, getDownloadURL, listAll} = require("firebase/storage");
var { getFirestore,  doc, getDoc } = require("firebase/firestore");
const {writeFileSync} = require('original-fs')
const {normalize} = require("path")


class firebaseClient{
    constructor(firebaseConfig, bucket){
        // Initialize Firebase
        this.app = initializeApp(firebaseConfig);
        // Initialize Cloud Storage and get a reference to the service
        this.storage = getStorage(this.app, bucket);
        this.db = getFirestore(this.app);
    }
    
    // Firebase rule: match /{lic}/{moduleType}/{dialogsType}/{version}/{itemId} {allow read: if true;}
    // ReturnStructure: none, save file from fireBase Store into storeLocation
    async downloadFile(filePath, storeLocation) {
        var pathReference = ref(this.storage, filePath);
        console.log(pathReference)
        var url = await getDownloadURL(pathReference);
        console.log(url)
        var response = await axios.get(url, {responseType: "blob"})
        var arrayBuff = await response.data.arrayBuffer()
        writeFileSync(normalize(storeLocation), Buffer.from(arrayBuff))
    }

    // async getUserSubscriptions() {
    //     let userSubscriptions = sessionStore.get('userSubscriptions', [])
    //     // console.log('userSubscriptions', userSubscriptions)
    //     if (userSubscriptions.length === 0) {
    //         userSubscriptions.push('public')
    //         const userEmail = store.get('user')?.email
    //         console.log('getUserSubscriptions', {userEmail})
    //         if (!(userEmail === undefined || userEmail === '')) {
    //             const docRef = doc(this.db, 'test_subscriptions', userEmail)
    //             const result = await getDoc(docRef)
    //             const {activeSubscriptions} = result.data()
    //             // console.log('result organization', activeSubscriptions)
    //             userSubscriptions = [...userSubscriptions, ...activeSubscriptions.map(i => i.planName)]
    //         }
    //     }
    //     userSubscriptions = new Set(userSubscriptions)
    //     userSubscriptions = [...userSubscriptions]
    //     // sessionStore.set('userSubscriptions', userSubscriptions)
    //     return userSubscriptions
    // }

    // structure of modulesVersions
    // id: autogenerated
    // name: string
    // version: strings
    // file: string
    // Firebase rule: match /modulesVersions {allow read: if true;}
    // ReturnStructure: [{name: string, version: string, filename: string}]
    // async getPackageVersions(moduleName) {
    //     const userSubscriptions = await this.getUserSubscriptions()
    //     // console.log('userSubscriptions', userSubscriptions)
    //     let allVersions = []
    //     for (const subscr of userSubscriptions) {
    //         try {
    //             const listRef = ref(this.storage, `${subscr}/${moduleName}`)
    //             const results = await listAll(listRef)
    //             const versions = results.prefixes.map(i => {
    //                 return {
    //                     name: i.name,
    //                     version: i.name,
    //                     filename: `${moduleName}.asar`,
    //                     filePath: i.fullPath
    //                 }
    //             })
    //             allVersions = [...allVersions, ...versions]
    //         } catch (e) {
    //             console.error(e)
    //         }
    //     }
    //     // console.log('allVersions', {moduleName, allVersions,})
    //     return allVersions
    // }
}

module.exports = firebaseClient
